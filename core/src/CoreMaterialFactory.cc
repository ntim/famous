/**
 * CoreMaterialFactory.cc
 *
 * @date Apr 23, 2012
 * @author Tim Niggemann, III Phys. Inst. A, RWTH Aachen University
 * @copyright GNU General Public License v3.0
 */

#include "CoreMaterialFactory.hh"

#include <cmath>

#include <CLHEP/Units/SystemOfUnits.h>
#include <G4Element.hh>
#include <G4MaterialPropertiesTable.hh>
#include <G4MaterialPropertyVector.hh>
#include <G4NistManager.hh>

#include <MaterialFactory.hh>
#include <VectorUtil.hh>

const double CoreMaterialFactory::LAMBDA_MIN = 100 * CLHEP::nm;
const double CoreMaterialFactory::LAMBDA_MAX = 5150 * CLHEP::nm;
const double CoreMaterialFactory::ENERGY_MIN = CLHEP::h_Planck * CLHEP::c_light / CoreMaterialFactory::LAMBDA_MAX;
const double CoreMaterialFactory::ENERGY_MAX = CLHEP::h_Planck * CLHEP::c_light / CoreMaterialFactory::LAMBDA_MIN;

CoreMaterialFactory::CoreMaterialFactory() {
	aluminium = NULL;
	silicon = NULL;
	dummyMatter = NULL;
	glass = NULL;
	perfectMirror = NULL;
	acrylic = NULL;
	ug11 = NULL;
}

CoreMaterialFactory::~CoreMaterialFactory() {
	delete aluminium;
	delete silicon;
	delete dummyMatter;
	delete glass;
	delete perfectMirror;
	delete acrylic;
	delete ug11;
}

CoreMaterialFactory* CoreMaterialFactory::getInstance() {
	static CoreMaterialFactory* instance = new CoreMaterialFactory();
	return instance;
}

G4Material* CoreMaterialFactory::getAir() {
	return MaterialFactory::getInstance()->getAir();
}

G4Material* CoreMaterialFactory::getAluminum() {
	if (aluminium == NULL) {
		aluminium = new G4Material("Al", 13., 26.98 * CLHEP::g / CLHEP::mole, 2.7 * CLHEP::g / CLHEP::cm3);
		//
		G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();
		// A. D. Rakić, A. B. Djurišic, J. M. Elazar, and M. L. Majewski.
		// Optical properties of metallic films for vertical-cavity optoelectronic devices, Appl. Opt. 37, 5271-5283 (1998)
		double lambdaAbs[] = { 206.59999999999999, 210.89508319000001, 215.27945843900002, 219.75498207499999,
				224.323549012, 228.98709356399999, 233.74759025500001, 238.60705465699999, 243.56754424800002,
				248.63115927600001, 253.80004365499997, 259.076385867, 264.462419893, 269.96042615600004,
				275.57273248800004, 281.30171511599997, 287.14979966499999, 293.11946218899999, 299.21323021700005,
				305.43368382400001, 311.78345672300003, 318.26523738099996, 324.88177015399998, 331.63585645400002,
				338.53035593199996, 345.56818768900001, 352.75233151199996, 360.08582913600003, 367.57178553300002,
				375.21337022299997, 383.01381862099998, 390.976433402, 399.10458590300004, 407.40171754799997,
				415.87134130600003, 424.51704317999997, 433.342483722, 442.35139958399998, 451.54760510400001,
				460.93499391300003, 470.51754059199999, 480.29930234899996, 490.28442074000003, 500.47712341999994,
				510.88172593500002, 521.50263354899994, 532.34434310699999, 543.41144494299999, 554.70862481799998,
				566.24066590999996, 578.01245083499998, 590.02896371500003, 602.29529228900003, 614.81663006799999,
				627.59827853199999, 640.64564937400007, 653.96426679499996, 667.55976983899996, 681.43791478399999,
				695.60457757500001, 710.06575631500004, 724.82757380600003, 739.89628013499998, 755.27825532899999,
				770.98001204699995, 787.00819834599997, 803.36960048899994, 820.07114582399993, 837.11990571199999,
				854.52309852300004, 872.28809269299995, 890.42240984499995, 908.93372796799997, 927.82988467399991,
				947.1188805139999, 966.80888236499993, 986.90822688699996, 1007.4254240600001, 1028.3691607600001,
				1049.7483044999999, 1071.57190709, 1093.84920857, 1116.5896410299999, 1139.8028326900001,
				1163.4986119099999, 1187.6870113699999, 1212.3782723500001, 1237.5828490000001, 1263.3114128500001,
				1289.5748572500002, 1316.3843020299998, 1343.75109819, 1371.6868327100001, 1400.20333347, 1429.31267422,
				1459.0271797400001, 1489.35943101, 1520.32227059, 1551.92880799, 1584.1924252899998, 1617.1267827700001,
				1650.7458246900001, 1685.0637852000002, 1720.09519439, 1755.8548843899998, 1792.3579956999999,
				1829.6199835899999, 1867.6566246099999, 1906.4840233099999, 1946.11861905, 1986.57719294, 2027.87687497,
				2070.0351512299999, 2113.0698713699999, 2156.99925609, 2201.8419049000004, 2247.6168039900003,
				2294.3433342500002, 2342.0412794899999, 2390.73083481, 2440.4326151600003, 2491.16766405,
				2542.9574624799998, 2595.82393804, 2649.78947414, 2704.87691958, 2761.1095981200001, 2818.5113184500001,
				2877.1063842000003, 2936.91960427, 2997.9763033100003, 3060.3023324599999, 3123.9240803000002,
				3188.8684840000001, 3255.16304072, 3322.8358193099998, 3391.9154721099999, 3462.4312471600001,
				3534.4130005299999, 3607.8912089699998, 3682.89698284, 3759.4620792599999, 3837.61891556,
				3917.4005829900002, 3998.8408607800002, 4081.9742303800003, 4166.8358901000001, 4253.46176999,
				4341.8885470799996, 4432.1536608799997, 4524.2953292299999, 4618.3525645400005, 4714.36519021,
				4812.3738575799998, 4912.4200630899995, 5014.5461658699996, 5118.7954056600001, 5225.2119211399995,
				5333.8407686, 5444.7279410199999, 5557.9203875399999, 5673.4660333600004, 5791.4137999900004,
				5911.8136260199999, 6034.7164881999997, 6160.1744230599998, 6288.2405489600005, 6418.9690885199998,
				6552.4153916600008, 6688.6359589399999, 6827.6884655699996, 6969.6317857599997, 7114.5260177200007,
				7262.4325090100001, 7413.4138826099997, 7567.5340633699998, 7724.8583051099995, 7885.4532182200001,
				8049.3867978899998, 8216.72845289, 8387.5490349499996, 8561.9208687400005, 8739.91778256,
				8921.6151395199995, 9107.0898694799998, 9296.42050165, 9489.6871977800001, 9686.9717861600002,
				9888.3577962100007, 10093.930493899999, 10303.7769178, 10517.985916000001, 10736.648183699999,
				10959.856301400001, 11187.704774600001, 11420.290073300001, 11657.7106731, 11900.067096800001,
				12147.461957200001, 12400.0 };
		double realRIndex[] = { 0.122846740621, 0.12766323936999999, 0.132638075903, 0.137780447014,
				0.14310109423699999, 0.14861234248399999, 0.15432813025799999, 0.16026403410100001, 0.16643728990600001,
				0.172866813664, 0.17957322398700001, 0.18657886846499999, 0.19390785558099999, 0.20158609341100001,
				0.20964133587700001, 0.218103236684, 0.227003410362, 0.23637549903999999, 0.24625524252799999,
				0.25668054813300001, 0.26769155514100001, 0.27933068712699999, 0.29164268308800001, 0.30467459579700001,
				0.318475742693, 0.33309759108199999, 0.34859355550600002, 0.36501868105000002, 0.38242918251000002,
				0.40088180633999998, 0.42043298113900002, 0.441137724284, 0.46304827880100002, 0.48621246725400002,
				0.51067177002200004, 0.53645916478199995, 0.56359680279299995, 0.59209364447500001, 0.621943229657,
				0.65312181283100001, 0.68558714640700003, 0.71927824097299997, 0.75411646792099996, 0.79000839656900002,
				0.82685077932600004, 0.86453812450099998, 0.90297334395100004, 0.94208205665699996, 0.981831304254,
				1.02225373683, 1.0634788174500001, 1.1057733466999999, 1.14959470086, 1.1956616422199999, 1.24504922419,
				1.29931534855, 1.3606642178799999, 1.43213865299, 1.5177902777300001, 1.62266619156, 1.7522271327900001,
				1.9105214400899999, 2.0964789170899998, 2.2989038883299999, 2.4933471431799998, 2.6456174350200001,
				2.7234912794400001, 2.71103705761, 2.61596564261, 2.46478082946, 2.2897216436300001, 2.1167979374599999,
				1.9610082574500001, 1.8278962782999999, 1.7173527662400001, 1.6268047274699999, 1.55306618966,
				1.4931679414500001, 1.44462731533, 1.40546877376, 1.3741556533299999, 1.34950329164, 1.3305996893600001,
				1.3167408570700001, 1.3073807395999999, 1.3020933564099999, 1.3005444859599999, 1.30247056289,
				1.3076629399299999, 1.3159561126699999, 1.32721886693, 1.34134758426, 1.35826114602, 1.3778970265899999,
				1.40020827547, 1.42516116713, 1.4527333553599999, 1.48291241079, 1.51569465093, 1.5510841949500001,
				1.58909219173, 1.6297361822800001, 1.6730395668, 1.71903115353, 1.7677447714800001, 1.81921893348,
				1.87349653834, 1.9306246037200001, 1.99065402252, 2.0536393372999999, 2.1196385280199999,
				2.1887128091700001, 2.2609264331299999, 2.3363464968600001, 2.41504274957, 2.4970873992699998,
				2.5825549162299999, 2.6715218318799998, 2.7640665314900001, 2.8602690394399999, 2.9602107959100001,
				3.06397442393, 3.1716434860399998, 3.2833022297699999, 3.39903532142, 3.5189275679900001,
				3.6430636267700001, 3.7715277031499999, 3.9044032365499999, 4.0417725754699996, 4.1837166423900003,
				4.3303145899500004, 4.48164345005, 4.6377777780100002, 4.7987892942899997, 4.96474652702,
				5.1357144587399999, 5.3117541815999996, 5.4929225658799998, 5.6792719469500001, 5.8708498368699997,
				6.0676986670700002, 6.2698555693899998, 6.4773522030999997, 6.6902146363000004, 6.9084632901800003,
				7.1321129554200002, 7.3611728896599997, 7.59564700545, 7.8355341578699997, 8.0808285404200006,
				8.3315201974900006, 8.5875956608199999, 8.8490387159899999, 9.1158313039600003, 9.3879545607400008,
				9.6653899961800001, 9.9481208110499999, 10.236133348599999, 10.5294186743, 10.827974275100001,
				11.131805865600001, 11.440929286599999, 11.755372479, 12.0751775109, 12.400402638099999, 12.7311243705,
				13.067439520100001, 13.4094672024, 13.7573507641, 14.111259608199999, 14.4713908912, 14.837971065,
				15.2112572405, 15.591538351900001, 15.9791361024, 16.374405676799999, 16.777736209699999, 17.1895510009,
				17.610307474999999, 18.0404968862, 18.480643769699999, 18.9313051512, 19.393069521600001,
				19.866555593600001, 20.3524108547, 20.8513099354, 21.363952812600001, 21.891062868199999,
				22.433384824000001, 22.9916825745, 23.5667369381, 24.159343346, 24.770309488100001, 25.400452933499999,
				26.050598740600002, 26.721577071999999, 27.414220826200001, 28.129363296200001, 28.867835866099998 };
		double imgRIndex[] = { 2.2878524992, 2.3438020058100002, 2.4006949119100001, 2.4585646624700002,
				2.5174449871800002, 2.5773698020800002, 2.6383731141600002, 2.7004889294800001, 2.7637511649199999,
				2.8281935630100001, 2.8938496086000001, 2.9607524455799998, 3.0289347913000002, 3.09842884581,
				3.1692661927099999, 3.2414776876000002, 3.3150933300899998, 3.3901421147000002, 3.4666518555199999,
				3.5446489794099998, 3.6241582821599998, 3.7052026418700001, 3.7878026842399999, 3.8719763948199999,
				3.9577386746999998, 4.0451008379399997, 4.1340700526500003, 4.2246487324000004, 4.31683389164,
				4.4106164885199997, 4.5059807908499998, 4.6029038161800004, 4.7013549151299996, 4.8012955865600002,
				4.9026796325499999, 5.0054537780299997, 5.1095588907499998, 5.2149319387700004, 5.3215088112400002,
				5.4292281020999997, 5.53803591403, 5.6478916845100002, 5.75877496865, 5.8706930430400002,
				5.9836891241299996, 6.0978509300699999, 6.2133192558900001, 6.3302961701499996, 6.4490523562000002,
				6.5699329673099998, 6.6933610568899997, 6.8198370241499999, 6.94993128614, 7.0842649981800001,
				7.2234690764899998, 7.3681031904100003, 7.5185007313399996, 7.6744790103599998, 7.8348149863499996,
				7.99635410453, 8.1526764782299992, 8.2925978830399991, 8.3996590302499996, 8.4547767538999992,
				8.4436844341599997, 8.3670434135799994, 8.2464500655300004, 8.1199206957900003, 8.0277205994299994,
				7.9972821202500004, 8.0365554932799999, 8.1378371344399998, 8.2864767611399994, 8.4679664420799998,
				8.6711112249200006, 8.8883717174600001, 9.1150709638599992, 9.3484632589299999, 9.5870096049600004,
				9.8298938810600003, 10.076722242200001, 10.327343021100001, 10.5817408634, 10.8399752049,
				11.102144857800001, 11.368367874200001, 11.6387703118, 11.9134801698, 12.1926243006, 12.476327015100001,
				12.7647096249, 13.057890482299999, 13.355985263099999, 13.659107345300001, 13.9673682052, 14.2808777875,
				14.599744830000001, 14.924077136299999, 15.2539817956, 15.589565353099999, 15.930933937400001,
				16.278193348599999, 16.6314491137, 16.990806515199999, 17.356370595000001, 17.7282461402, 18.1065376524,
				18.4913493038, 18.882784883799999, 19.2809477359, 19.685940688500001, 20.097865981599998, 20.5168251881,
				20.942919135099999, 21.3762478222, 21.8169103416, 22.2650047988, 22.7206282364, 23.1838765617,
				23.654844479800001, 24.133625433300001, 24.620311550299999, 25.114993602999999, 25.6177609772,
				26.128701656099999, 26.647902219599999, 27.1754478621, 27.711422429900001, 28.255908482199999,
				28.808987377400001, 29.3707393872, 29.941243842900001, 30.520579314500001, 31.108823827799998,
				31.706055121399999, 32.3123509463, 32.927789411699997, 33.552449379800002, 34.186410910600003,
				34.829755761000001, 35.482567938400003, 36.1449343106, 36.8169452721, 37.498695468199998,
				38.190284573299998, 38.891818123599997, 39.603408400699998, 40.325175360099998, 41.057247600799997,
				41.799763367899999, 42.5528715791, 43.316732865600002, 44.0915206146, 44.877422000599999,
				45.674638990600002, 46.483389305700001, 47.303907323600001, 48.136444901600001, 48.981272103400002,
				49.838677807400003, 50.7089701815, 51.592477001299997, 52.489545798999998, 53.400543823,
				54.325857797600001, 55.265893469300003, 56.221074932800001, 57.191843730400002, 58.178657724200001,
				59.181989742799999, 60.202326008900002, 61.240164356900003, 62.296012255999997, 63.370384653899997,
				64.463801663599995, 65.576786115000004, 66.709860997600003, 67.863546822100005, 69.038358927999994,
				70.2348047678, 71.453381195000006, 72.694571786200001, 73.958844221800007, 75.246647752499996,
				76.5584107735, 77.894538527199998, 79.255410952299997, 80.641380693299993, 82.052771282600006,
				83.489875504599993, 84.952953945399997, 86.442233733600006, 87.957907470600006, 89.500132350300007,
				91.0690294634, 92.664683280299997, 94.287141308399995, 95.936413912999996, 97.612474296499997,
				99.315258624699993 };
		// Calculate refractive index.
		G4MaterialPropertyVector* rIndexVector = new G4MaterialPropertyVector();
		G4MaterialPropertyVector* realRIndexVector = new G4MaterialPropertyVector();
		G4MaterialPropertyVector* imgRIndexVector = new G4MaterialPropertyVector();
		for (size_t i = 200; i > 0; i--) {
			double e = CLHEP::h_Planck * CLHEP::c_light / (lambdaAbs[i - 1] * CLHEP::micrometer);
			double rAbs = sqrt(realRIndex[i - 1] * realRIndex[i - 1] + imgRIndex[i - 1] * imgRIndex[i - 1]);
			rIndexVector->InsertValues(e, rAbs);
			realRIndexVector->InsertValues(e, realRIndex[i - 1]);
			imgRIndexVector->InsertValues(e, imgRIndex[i - 1]);
		}
		// Build and set table.
		mpt->AddProperty("RINDEX", rIndexVector);
		mpt->AddProperty("REALRINDEX", realRIndexVector);
		mpt->AddProperty("IMAGINARYRINDEX", imgRIndexVector);
		// By default, 100 % lobe reflection which dices the facet normal according to sigma alpha.
		G4MaterialPropertyVector* lobe = new G4MaterialPropertyVector();
		lobe->InsertValues(ENERGY_MIN, 1.0);
		lobe->InsertValues(ENERGY_MAX, 1.0);
		mpt->AddProperty("SPECULARLOBECONSTANT", lobe);
		G4MaterialPropertyVector* spike = new G4MaterialPropertyVector();
		spike->InsertValues(ENERGY_MIN, 0.0);
		spike->InsertValues(ENERGY_MAX, 0.0);
		mpt->AddProperty("SPECULARSPIKECONSTANT", spike);
		G4MaterialPropertyVector* backscatter = new G4MaterialPropertyVector();
		backscatter->InsertValues(ENERGY_MIN, 0.0);
		backscatter->InsertValues(ENERGY_MAX, 0.0);
		mpt->AddProperty("BACKSCATTERCONSTANT", backscatter);
		//
		aluminium->SetMaterialPropertiesTable(mpt);
	}
	return aluminium;
}

G4Material* CoreMaterialFactory::getSilicon() {
	if (silicon == NULL) {
		silicon = G4NistManager::Instance()->FindOrBuildMaterial("G4_Si");
		// Build refractive index arrays.
		// Source: @link(http://refractiveindex.info/?group=CRYSTALS&material=Si).
		G4double eMin = 0.1 * CLHEP::eV/* eMax = 10. * eV*/;
		const int n = 100;
		G4double energies[n];
		G4double rIndices[n];
		G4double lastRIndex = 0;
		for (int i = 0; i < n; i++) {
			G4double energy = eMin * ((double) i + 1.);
			// Wavelength in micrometers.
			G4double lambda = CLHEP::h_Planck * CLHEP::c_light / energy / CLHEP::micrometer;
			// Sellmeier equation.
			G4double rIndex = sqrt(
					1 + 10.6684293 * pow(lambda, 2) / (pow(lambda, 2) - pow(0.301516485, 2))
							+ 0.003043475 * pow(lambda, 2) / (pow(lambda, 2) - pow(1.13475115, 2))
							+ 1.54133408 * pow(lambda, 2) / (pow(lambda, 2) - pow(1104.0, 2)));
			// Check for NaN values.
			if (!std::isnan(rIndex)) {
				// Cache last real rIndex.
				lastRIndex = rIndex;
				rIndices[i] = rIndex;
			} else {
				rIndices[i] = lastRIndex;
			}
			energies[i] = energy;
			// G4cout << "Si\t" << energy / eV << "\t" << lambda / micrometer << "\t" << rIndices[i] << G4endl;
		}
		// Set table.
		G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();
		mpt->AddProperty("RINDEX", energies, rIndices, n);
		silicon->SetMaterialPropertiesTable(mpt);
	}
	return silicon;
}

G4Material* CoreMaterialFactory::getDummyMatter() {
	if (dummyMatter == NULL) {
		dummyMatter = new G4Material("dummyMat", 1., 1. * CLHEP::g / CLHEP::mole, 1. * CLHEP::g / CLHEP::cm3);
	}
	return dummyMatter;
}

G4Material* CoreMaterialFactory::getGlass() {
	if (glass == NULL) {
		glass = G4NistManager::Instance()->FindOrBuildMaterial("G4_GLASS_PLATE");
		G4double energies[2] = { ENERGY_MIN, ENERGY_MAX };
		G4double rIndices[2] = { 1.6, 1.6 };
		G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();
		mpt->AddProperty("RINDEX", energies, rIndices, 2);
		glass->SetMaterialPropertiesTable(mpt);
	}
	return glass;
}

G4Material* CoreMaterialFactory::getPerfectMirror() {
	if (perfectMirror == NULL) {
		// We ca not use the nist manager here, because he builds the material only once.
		perfectMirror = new G4Material("Al", 13., 26.98 * CLHEP::g / CLHEP::mole, 2.7 * CLHEP::g / CLHEP::cm3);
		G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();
		const int n = 2;
		G4double energies[2] = { ENERGY_MIN, ENERGY_MAX };
		G4double reflectivity[2] = { 0.9, 0.9 };
		mpt->AddProperty("REFLECTIVITY", energies, reflectivity, n);
		perfectMirror->SetMaterialPropertiesTable(mpt);
	}
	return perfectMirror;
}

G4Material* CoreMaterialFactory::getAcrylic() {
	if (acrylic == NULL) {
		// Create elements.
		G4Element* H = G4NistManager::Instance()->FindOrBuildElement("H");
		G4Element* C = G4NistManager::Instance()->FindOrBuildElement("C");
		G4Element* O = G4NistManager::Instance()->FindOrBuildElement("O");
		// Create material.
		acrylic = new G4Material("Acrylic", 1.19 * CLHEP::g / CLHEP::cm3, 3);
		acrylic->AddElement(C, 5);
		acrylic->AddElement(H, 8);
		acrylic->AddElement(O, 2);
		// Create material properties table.
		// Taken from Geant4 example advanced air_shower and
		// http://refractiveindex.info/?shelf=organic&book=poly%28methyl_methacrylate%29&page=Szczurowski.
		G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();
		// Parameterization for refractive index of High Grade PMMA.
		G4MaterialPropertyVector* rIndexVector = new G4MaterialPropertyVector();
		const int nRIndex = 1024;
		const double dE = (ENERGY_MAX - ENERGY_MIN) / nRIndex;
		// Parameters of the Geant4 parameterization.
		//	double bParam[4] = { 1760.7010, -1.3687, 2.4388e-3, -1.5178e-6 };
		// Parameters of the Sellmeier equation
		double b[3] = { 0.99654, 0.18964, 0.00411 };
		double c[3] = { 0.00787, 0.02191, 3.85727 };
		for (double e = ENERGY_MIN; e <= ENERGY_MAX; e += dE) {
			// Geant4 parameterization.
			//	double lambda = CLHEP::h_Planck * CLHEP::c_light / e;
			//	double rIndex = 0.;
			//	for (unsigned int i = 0; i < 4; i++) {
			//		rIndex += (bParam[i] / 1000.0) * std::pow(lambda / CLHEP::nm, 1. * i);
			//	}
			// Sellmeier equation.
			double lambda = CLHEP::h_Planck * CLHEP::c_light / e / CLHEP::micrometer;
			double rIndex = 1.0;
			for (unsigned int i = 0; i < 3; i++) {
				rIndex += lambda * lambda * b[i] / (lambda * lambda - c[i]);
			}
			rIndex = sqrt(rIndex);
			rIndexVector->InsertValues(e, rIndex);
		}
		mpt->AddProperty("RINDEX", rIndexVector);
		// Absorption lengths.
		// Private communications with Fresnel Optics Gmbh Germany.
		G4MaterialPropertyVector* absVector = new G4MaterialPropertyVector();
		double lambdaAbsArray[] = { 200.98901, 250.76923, 253.07692, 254.3956, 260., 265.93405, 269.89011, 276.48352,
				289.34067, 295.27472, 301.2088, 307.80219, 315.38461, 324.94507, 336.15384, 348.35165, 367.80219,
				390.54944, 420.54944, 454.83517, 488.7912, 536.9231, 589.34064, 640.10986, 696.81317, 718.24176,
				731.75824, 748.57141, 783.18683, 822.08789, 851.75824, 877.80219, 886.70331, 896.59338, 905.49451, 920.,
				936.15387, 952.30768, 972.74725, 990.54944, 1003.40662, 1011.97803, 1023.18683, 1033.73621, 1042.96704,
				1053.18677, 1067.36267, 1079.89014, 1091.7583, 1099.3407 };
		std::vector<double> lambdaAbs = VectorUtil::times(VectorUtil::adapt(lambdaAbsArray, 55), CLHEP::nm);
		// Transmission (in %) of  3mm thick PMMA.
		double transAbsArray[] = { 0, 0, 1.21083, 2.70655, 11.46724, 22.29345, 30.27065, 41.02564, 61.39601, 70.37037,
				77.42165, 82.40741, 86.53846, 88.88889, 89.95727, 90.74074, 91.45299, 91.73789, 91.95157, 92.16525,
				92.23647, 92.23647, 92.37891, 92.52137, 92.59259, 92.52137, 92.37891, 92.52137, 92.59259, 92.66382,
				92.59259, 92.23647, 91.66666, 91.23932, 91.59544, 92.23647, 92.59259, 92.52137, 92.23647, 92.02279,
				91.66666, 91.88034, 91.95157, 92.02279, 92.16525, 92.37891, 92.45014, 92.52137, 92.45014, 92.23647 };
		std::vector<double> transAbs = VectorUtil::times(VectorUtil::adapt(transAbsArray, 55), 1. / 100.);
		// Reverse both arrays because the G4MaterialPropertyVector has to be filled in order of the energy. Stupid!
		std::reverse(lambdaAbs.begin(), lambdaAbs.end());
		std::reverse(transAbs.begin(), transAbs.end());
		for (size_t i = 0; i < lambdaAbs.size(); i++) {
			double e = CLHEP::h_Planck * CLHEP::c_light / lambdaAbs.at(i);
			double absLength = -3. * CLHEP::mm / log(transAbs.at(i));
			absVector->InsertValues(e, absLength);
		}
		mpt->AddProperty("ABSLENGTH", absVector);
		//
		acrylic->SetMaterialPropertiesTable(mpt);
	}
	return acrylic;
}

G4Material* CoreMaterialFactory::getUG11() {
	if (ug11 == NULL) {
		// Create elements.
		G4Element* H = G4NistManager::Instance()->FindOrBuildElement("H");
		G4Element* C = G4NistManager::Instance()->FindOrBuildElement("C");
		G4Element* O = G4NistManager::Instance()->FindOrBuildElement("O");
		// Create material.
		// TODO: For now the chemical composition is that of Acrylic - not relevant for the optical processes anyway.
		ug11 = new G4Material("UG11", 2.92 * CLHEP::g / CLHEP::cm3, 3);
		ug11->AddElement(C, 5);
		ug11->AddElement(H, 8);
		ug11->AddElement(O, 2);
		// Add material properties.
		G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();
		// Add refractive index.
		mpt->AddProperty("RINDEX", new G4MaterialPropertyVector());
		mpt->AddEntry("RINDEX", ENERGY_MIN, 1.56);
		mpt->AddEntry("RINDEX", CLHEP::h_Planck * CLHEP::c_light / (587.6 * CLHEP::nm), 1.56);
		mpt->AddEntry("RINDEX", CLHEP::h_Planck * CLHEP::c_light / (365 * CLHEP::nm), 1.59);
		mpt->AddEntry("RINDEX", ENERGY_MAX, 1.59);
		// Add absorbtion length.
		G4MaterialPropertyVector* absVector = new G4MaterialPropertyVector();
		double lambdaAbsArray[] = { 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360,
				370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570,
				580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780,
				790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990,
				1000, 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160,
				1170, 1180, 1190, 1200, 1250, 1300, 1350, 1400, 1450, 1500, 1550, 1600, 1650, 1700, 1750, 1800, 1850,
				1900, 1950, 2000, 2050, 2100, 2150, 2200, 2250, 2300, 2350, 2400, 2450, 2500, 2550, 2600, 2650, 2700,
				2750, 2800, 2850, 2900, 2950, 3000, 3050, 3100, 3150, 3200, 3250, 3300, 3350, 3400, 3450, 3500, 3550,
				3600, 3650, 3700, 3750, 3800, 3850, 3900, 3950, 4000, 4050, 4100, 4150, 4200, 4250, 4300, 4350, 4400,
				4450, 4500, 4550, 4600, 4650, 4700, 4750, 4800, 4850, 4900, 4950, 5000, 5050, 5100, 5150 };
		std::vector<double> lambdaAbs = VectorUtil::times(VectorUtil::adapt(lambdaAbsArray, 180), CLHEP::nm);
		double transAbsArray[] = { 1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005, 6.10e-004, 5.60e-002, 2.80e-001,
				5.20e-001, 7.10e-001, 8.30e-001, 8.80e-001, 9.10e-001, 9.20e-001, 9.30e-001, 9.20e-001, 9.10e-001,
				8.70e-001, 7.60e-001, 4.80e-001, 1.20e-001, 4.00e-003, 1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005,
				1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005,
				1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005, 1.00e-005,
				1.00e-005, 1.00e-005, 1.00e-005, 3.60e-004, 8.10e-003, 5.00e-002, 1.40e-001, 2.20e-001, 2.80e-001,
				2.80e-001, 2.40e-001, 1.90e-001, 1.40e-001, 9.70e-002, 6.70e-002, 4.70e-002, 3.30e-002, 2.40e-002,
				1.80e-002, 1.40e-002, 1.10e-002, 9.10e-003, 8.00e-003, 7.00e-003, 6.30e-003, 5.90e-003, 5.80e-003,
				5.90e-003, 6.10e-003, 6.40e-003, 7.00e-003, 8.10e-003, 9.40e-003, 1.10e-002, 1.30e-002, 1.50e-002,
				1.80e-002, 2.10e-002, 2.50e-002, 2.80e-002, 3.30e-002, 3.70e-002, 4.10e-002, 4.40e-002, 4.60e-002,
				4.80e-002, 4.80e-002, 4.90e-002, 4.60e-002, 4.30e-002, 3.90e-002, 3.70e-002, 3.30e-002, 3.00e-002,
				2.70e-002, 2.40e-002, 2.10e-002, 1.80e-002, 8.80e-003, 5.50e-003, 4.60e-003, 4.80e-003, 4.70e-003,
				4.30e-003, 4.30e-003, 5.00e-003, 6.00e-003, 6.60e-003, 6.70e-003, 6.80e-003, 7.20e-003, 8.00e-003,
				1.00e-002, 1.20e-002, 1.60e-002, 2.00e-002, 2.60e-002, 3.20e-002, 3.80e-002, 4.60e-002, 5.30e-002,
				6.00e-002, 6.80e-002, 7.00e-002, 7.00e-002, 7.00e-002, 7.20e-002, 7.00e-002, 6.40e-002, 3.00e-002,
				1.10e-002, 4.80e-003, 2.50e-003, 1.60e-003, 1.00e-003, 7.00e-004, 5.00e-004, 3.70e-004, 2.90e-004,
				2.40e-004, 2.10e-004, 1.80e-004, 1.80e-004, 1.90e-004, 2.10e-004, 2.60e-004, 3.00e-004, 3.20e-004,
				3.20e-004, 3.00e-004, 2.60e-004, 2.20e-004, 1.70e-004, 1.20e-004, 9.00e-005, 6.70e-005, 5.70e-005,
				5.20e-005, 5.40e-005, 6.10e-005, 7.60e-005, 1.00e-004, 1.40e-004, 1.70e-004, 1.70e-004, 1.80e-004,
				1.70e-004, 1.70e-004, 1.60e-004, 1.50e-004, 1.50e-004, 1.60e-004, 1.70e-004, 1.90e-004, 1.90e-004,
				1.40e-004, 9.40e-005 };
		std::vector<double> transAbs = VectorUtil::times(VectorUtil::adapt(transAbsArray, 180), 1.0);
		// Reverse both arrays because the G4MaterialPropertyVector has to be filled in order of the energy. Stupid!
		std::reverse(lambdaAbs.begin(), lambdaAbs.end());
		std::reverse(transAbs.begin(), transAbs.end());
		for (size_t i = 0; i < lambdaAbs.size(); i++) {
			double e = CLHEP::h_Planck * CLHEP::c_light / lambdaAbs.at(i);
			double absLength = -1. * CLHEP::mm / log(transAbs.at(i));
			absVector->InsertValues(e, absLength);
		}
		mpt->AddProperty("ABSLENGTH", absVector);
		//
		ug11->SetMaterialPropertiesTable(mpt);
	}
	return ug11;
}
